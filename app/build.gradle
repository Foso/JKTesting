apply from: '../constants.gradle'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'io.gitlab.arturbosch.detekt'

android {
    compileSdkVersion configuration.compileSdk
    defaultConfig {
        applicationId "de.jensklingenberg.jktesting"
        minSdkVersion configuration.minSdk
        targetSdkVersion configuration.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "de.jensklingenberg.jktesting.UiTestsRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

detekt {
    version = "1.0.0.RC8"
    input = files("src/main/kotlin")
    filters = ".*/resources/.*,.*/build/.*"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$configuration.kotlin_version"
    implementation "com.android.support:appcompat-v7:${libs.supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'


//Retrofit
    implementation "com.squareup.retrofit2:retrofit:${libs.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${libs.retrofitVersion}"
    implementation("com.squareup.retrofit2:converter-simplexml:${libs.retrofitVersion}") {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${libs.rxjava2Adapter}"

    //Andorid
   // implementation 'androidx.core:core-ktx:1.0.0'



    //Moshi
    implementation "com.squareup.moshi:moshi:${libs.moshiVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${libs.moshiConverterVersion}"
    implementation "com.serjltt.moshi:moshi-lazy-adapters:${libs.moshilazyadapters}"

    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    androidTestCompile "com.android.support:support-annotations:${libs.supportLibVersion}"


    //Testing
    androidTestCompile "com.android.support.test:rules:${libs.rulesVersion}"
    testImplementation "junit:junit:${libs.junit}"
    androidTestImplementation "com.android.support.test:runner:${libs.runnerVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${libs.espressocore}"
    androidTestImplementation "org.mockito:mockito-android:${libs.mockitoVersion}"
    androidTestImplementation "org.mockito:mockito-core:${libs.mockitoVersion}"
    androidTestImplementation "io.mockk:mockk:${libs.mockkVersion}"
    androidTestImplementation "io.mockk:mockk-android:${libs.mockkVersion}"

    implementation "com.google.dagger:dagger-android:${libs.dagger_version}"
    implementation "com.google.dagger:dagger-android-support:${libs.dagger_version}"
    // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:${libs.dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${libs.dagger_version}"


}

